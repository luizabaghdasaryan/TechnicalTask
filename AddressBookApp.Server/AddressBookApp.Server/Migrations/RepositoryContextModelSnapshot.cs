// <auto-generated />
using AddressBookApp.Server.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AddressBookApp.Server.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressBookApp.Server.Entities.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "armen.grigoryan@example.com",
                            FirstName = "Armen",
                            LastName = "Grigoryan",
                            PhoneNumber = "+37491012345",
                            PhysicalAddress = "Street 1, Yerevan"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ani.harutyunyan@example.com",
                            FirstName = "Ani",
                            LastName = "Harutyunyan",
                            PhoneNumber = "+37491567890"
                        },
                        new
                        {
                            Id = 3,
                            Email = "anna.sargsyan@example.com",
                            FirstName = "Anna",
                            LastName = "Sargsyan",
                            PhoneNumber = "+37499321098",
                            PhysicalAddress = "Street 42, Gyumri"
                        },
                        new
                        {
                            Id = 4,
                            Email = "sahak.sahakyan@example.com",
                            FirstName = "Sahak",
                            LastName = "Sahakyan",
                            PhoneNumber = "+37497654321",
                            PhysicalAddress = "Street 34, Vanadzor"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ani.sahakyan@example.com",
                            FirstName = "Ani",
                            LastName = "Sahakyan",
                            PhoneNumber = "+37494123456",
                            PhysicalAddress = "Street 34, Yerevan"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
